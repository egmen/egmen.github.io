{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","save","url","name","body","appendChild","style","href","download","click","fileInput","React","createRef","_useState","useState","_useState2","Object","C_Projects_imagick_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","innerImage","changeImage","_useState3","_useState4","outerImage","setOuter","_useState5","_useState6","outerSizeTiff","setSizeTiff","_useState7","_useState8","isLoading","toggleLoading","outFileJpg","outFileTiff","_convert","C_Projects_imagick_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","C_Projects_imagick_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","command","_window","Magick","wrap","_context","prev","next","Promise","mapSeries","Call","content","Uint8Array","concat","func","_ref","_ref2","jpg","tif","img","URL","createObjectURL","buffer","length","catch","err","console","error","finally","stop","apply","this","arguments","readFile","event","Buffer","from","target","result","Blob","type","jpg2","imageUrl","imageUrl2","react__WEBPACK_IMPORTED_MODULE_3___default","className","Fragment","src","alt","_","round","onClick","onChange","reader","FileReader","addEventListener","readAsArrayBuffer","current","files","accept","ref"],"mappings":"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","file":"static/js/main.361fd02e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from 'react';\nimport _ from 'lodash'\nimport Promise from 'bluebird'\nimport './App.css';\n\nfunction App() {\n  let fileInput = React.createRef()\n  const [ innerImage, changeImage ] = useState(null)\n  const [ outerImage, setOuter ] = useState(null)\n  const [ outerSizeTiff, setSizeTiff ] = useState(0)\n  const [ isLoading, toggleLoading ] = useState(false)\n\n  const outFileJpg = 'out.jpg'\n  const outFileTiff = 'out.tif'\n  async function convert () {\n    const command = [\"convert\",\n      \"srcFile.jpg\",\n      '-rotate','90',\n      // '-resize','40%',\n      '-resize','1024x1024',\n      '-type', 'grayscale',\n      // '-monochrome','',\n      // '-type','bilevel',\n      // '-format','tif',\n      '-compress','Group4'\n    ]\n    const { Magick } = window\n    toggleLoading(true)\n    Promise.mapSeries([\n      Magick.Call([{ 'name': 'srcFile.jpg', 'content': new Uint8Array(innerImage) }], [...command, outFileJpg]),\n      Magick.Call([{ 'name': 'srcFile.jpg', 'content': new Uint8Array(innerImage) }], [...command, outFileTiff]),\n    ], func => func)\n      .then(([jpg, tif]) => {\n        const img = URL.createObjectURL(jpg[0]['blob'])\n        setOuter(jpg[0].buffer)\n        setSizeTiff(tif[0].buffer.length)\n        save(img, outFileJpg)\n        save(URL.createObjectURL(tif[0]['blob']), outFileTiff)\n      })\n      .catch((err) => {\n        console.error(111, err)\n      })\n      .finally(() => {\n        toggleLoading(false)\n      })\n  }\n\n  function loadImage () {\n    var reader = new FileReader()\n    reader.addEventListener('load',readFile )\n    reader.readAsArrayBuffer(fileInput.current.files[0])\n  }\n\n  function readFile (event) {\n    changeImage(Buffer.from(event.target.result))\n  }\n\n  const jpg = new Blob( [ innerImage ], { type: \"image/jpeg\" } )\n  const jpg2 = new Blob( [ outerImage ], { type: \"image/jpeg\" } )\n  var imageUrl = URL.createObjectURL( jpg )\n  var imageUrl2 = URL.createObjectURL( jpg2 )\n\n  return (\n    <div className=\"App\">\n        <div>{innerImage &&\n          <>\n            <img src={imageUrl} className=\"App-logo\" alt=\"logo\" />\n            <p>\n              {_.round(innerImage.length / 1024 / 1024, 2)} Мб\n            </p>\n          </>}\n        </div>\n        <div>\n          {isLoading\n            ? <div className=\"lds-dual-ring\"></div>\n            : outerImage && <>\n            <img src={imageUrl2} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            {_.round(outerImage.length / 1024, 2)} Кб (jpg),\n            {_.round(outerSizeTiff / 1024, 2)} Кб (tiff)\n          </p>\n          </>\n          }\n        </div>\n\n        <button\n          onClick={convert}\n        >\n          Сконвертировать\n        </button>\n        <input type='file' onChange={loadImage} accept=\".jpg, .jpeg, .png\" ref={fileInput} />\n    </div>\n  );\n}\n\n\nexport default App;\n\nfunction save (url, name) {\n  var a = document.createElement(\"a\");\n  document.body.appendChild(a);\n  a.style = \"display: none\";\n  a.href = url;\n  a.download = name;\n  a.click();\n}"],"sourceRoot":""}